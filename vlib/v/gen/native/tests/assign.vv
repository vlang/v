fn main() {
	test_int()
	test_fp()
	test_unsafe()
	test_alias(100, 9)
}

fn test_int() {
	a := 100
	mut b := a
	b += b
	b += 50

	assert b == 250

	mut c := u8(b)
	d := 4
	c += u8(-d)
	// TODO: remove the int cast when unsigned integer print will be supported
	println(int(c))

	mut e := 3
	assert e == 3
	mut f := &e
	assert *f == 3
	unsafe{*f = 5}
	assert *f == 5
	assert e == 5
}

fn test_fp() {
	// TODO: implement asserts for floats
	a := 10.0
	mut b := a
	b += 15.0
	assert int(b) == 25
	b -= 10.0
	assert int(b) == 15
	b *= 4
	assert int(b) == 60
	b /= 2
	assert int(b) == 30

	b += a
	assert int(b) == 40
	b -= a
	assert int(b) == 30
	b *= a
	assert int(b) == 300
	b /= a
	assert int(b) == 30

	println(int(b))
}

fn test_unsafe() {
	a := 10

	unsafe {
		b := 4
		println(a + b)
	}
}

type Integer = int

fn test_alias(a Integer, b Integer) {
	e := a + b
	assert e == a + b
	println(int(e))
}
