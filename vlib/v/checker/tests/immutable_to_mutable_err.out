vlib/v/checker/tests/immutable_to_mutable_err.vv:10:27: notice: left-side of assignment expects a mutable reference, but variable `arr` is immutable, declare it with `mut` to make it mutable or clone it
    8 | fn main() {
    9 |     arr := [1, 2, 3] // declared as immutable!
   10 |     mut arr_mut := if true { arr } else { []int{} }
      |                              ~~~
   11 |     mut arr_mut2 := match true {
   12 |         true { arr }
vlib/v/checker/tests/immutable_to_mutable_err.vv:12:10: notice: left-side of assignment expects a mutable reference, but variable `arr` is immutable, declare it with `mut` to make it mutable or clone it
   10 |     mut arr_mut := if true { arr } else { []int{} }
   11 |     mut arr_mut2 := match true {
   12 |         true { arr }
      |                ~~~
   13 |         else { [0] }
   14 |     }
vlib/v/checker/tests/immutable_to_mutable_err.vv:22:15: error: use `mut array2 := array1.clone()` instead of `mut array2 := array1` (or use `unsafe`)
   20 | 
   21 |     a := Test{}
   22 |     mut arr_mut3 := a.foo
      |                  ~~
   23 |     arr_mut3[0] = 999
   24 |     assert a.foo == [1, 2, 3]
vlib/v/checker/tests/immutable_to_mutable_err.vv:26:15: error: use `mut array2 := array1.clone()` instead of `mut array2 := array1` (or use `unsafe`)
   24 |     assert a.foo == [1, 2, 3]
   25 | 
   26 |     mut arr_mut4 := a.bar
      |                  ~~
   27 |     arr_mut4[0] = 999
   28 |     assert a.bar == [1, 2, 3]
